{"version":3,"sources":["components/Header.js","components/WeatherCard.js","components/Forecast.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","WeatherCard","temperature","city","sunrise","sunset","humidity","icon","weatherIcons","faSmog","size","color","faBolt","faCloudRain","faSnowman","faSun","faCloud","Card","Content","Feed","Event","moment","format","Math","floor","Date","toLocaleTimeString","Forecast","forecast","style","marginTop","Group","itemsPerRow","map","data","CardContent","CardHeader","unix","dt","round","temp","max","min","CardMeta","CardDescription","weather","description","App","useState","latitude","setLatitude","longitude","setLongitude","setCity","setTemperature","setHumidity","setSunrise","setSunset","setIcon","setForecast","loading","setLoading","useEffect","navigator","geolocation","getCurrentPosition","position","coords","axios","get","then","weatherData","console","log","current","timezone","main","daily","Loader","active","inline","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f87210b9.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Header() {\r\n    return (\r\n        <div className=\"app-header\">\r\n            React Weather Application\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Card, Feed } from 'semantic-ui-react'\r\nimport moment from 'moment';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faBolt, faCloud, faCloudRain, faSmog, faSnowman, faSun } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport default function WeatherCard(\r\n  {  temperature, city, sunrise, sunset, humidity, icon }) {\r\n  let weatherIcons = null;\r\n\r\n  if (icon === 'Haze') {\r\n    weatherIcons = <FontAwesomeIcon icon={faSmog} size=\"lg\" color=\"#212121\" />\r\n  }\r\n  else if (icon === 'Thunderstorm') {\r\n    weatherIcons = <FontAwesomeIcon icon={faBolt} size=\"lg\" color=\"#212121\" />\r\n  }\r\n  else if (icon === 'Drizzle') {\r\n    weatherIcons = <FontAwesomeIcon icon={faCloudRain} size=\"lg\" color=\"#212121\" />\r\n  }\r\n  else if (icon === 'Rain') {\r\n    weatherIcons = <FontAwesomeIcon icon={faCloudRain} size=\"lg\" color=\"#212121\" />\r\n  }\r\n  else if (icon === 'Snow') {\r\n    weatherIcons = <FontAwesomeIcon icon={faSnowman} size=\"lg\" color=\"#212121\" />\r\n  }\r\n  else if (icon === 'Mist') {\r\n    weatherIcons = <FontAwesomeIcon icon={faSmog} size=\"lg\" color=\"#212121\" />\r\n  }\r\n  else if (icon === 'Clear') {\r\n    weatherIcons = <FontAwesomeIcon icon={faSun} size=\"lg\" color=\"#212121\" />\r\n  }\r\n  else if (icon === 'Clouds') {\r\n    weatherIcons = <FontAwesomeIcon icon={faCloud} size=\"lg\" color=\"#212121\" />\r\n  }\r\n  return (\r\n    <Card className=\"weather-card-main\">\r\n      <Card.Content className=\"weather-card\">\r\n        <Card.Header className=\"weather-card-child\">{city}</Card.Header>\r\n        <div className=\"icon-container\">\r\n          {weatherIcons}\r\n        </div>\r\n      </Card.Content>\r\n      <Card.Content>\r\n        <Feed>\r\n          <Feed.Event>\r\n            <Feed.Content>\r\n              <h5 className=\"weather-card-child\">\r\n                {moment().format('MMMM Do, h:mm a')}\r\n              </h5>\r\n              <div className=\"weather-card\">\r\n                <div className=\"weather-card-child\">\r\n                  <b>Temperature</b>: {Math.floor(temperature)-273} ℃\r\n                </div>\r\n                <div className=\"weather-card-child\">\r\n                  <b>Humidity</b>: {humidity} %\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"weather-card\">\r\n                <div className=\"weather-card-child\">\r\n                  <b>Sunrise</b>: {new Date(sunrise * 1000).toLocaleTimeString('en-IN')}\r\n                </div>\r\n                <div className=\"weather-card-child\">\r\n                  <b>Sunset</b>: {new Date(sunset * 1000).toLocaleTimeString('en-IN')}\r\n                </div>\r\n              </div>\r\n\r\n            </Feed.Content>\r\n          </Feed.Event>\r\n        </Feed>\r\n      </Card.Content>\r\n    </Card>\r\n  )\r\n}","import React from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardMeta } from 'semantic-ui-react';\r\nimport moment from 'moment';\r\n\r\nexport default function Forecast({ forecast }) {\r\n    return (\r\n        <div style={{ marginTop: 20 }}>\r\n            <Card.Group itemsPerRow={4}>\r\n                {forecast.map((data) => {\r\n                    return (\r\n                        <Card className=\"forecast-card\">\r\n                            <CardContent>\r\n                            <CardHeader className=\"forecast-date\">Date: {moment.unix(data.dt).format('LL')}</CardHeader>\r\n                                <CardHeader className=\"forecast-header\">Temperature: {Math.round(((data.temp.max + data.temp.min) / 2 - 273))} ℃</CardHeader>\r\n                                <CardMeta className=\"forecast-header\">Humidity: {data.humidity}%</CardMeta>\r\n                                <CardDescription className=\"temp-desc\">\r\n                                    {data.weather[0].description}\r\n                                </CardDescription>\r\n                            </CardContent>\r\n                        </Card>\r\n                    )\r\n                })}\r\n            </Card.Group>\r\n        </div>\r\n    )\r\n}\r\n","import axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport WeatherCard from './components/WeatherCard';\nimport Forecast from './components/Forecast';\nimport { Loader } from 'semantic-ui-react';\n\nconst URL = 'https://api.openweathermap.org/data/2.5/onecall'\nconst API_KEY = '59425d0a678328ec8fda7625fb071e44'\n\n\nfunction App() {\n  const [latitude, setLatitude] = useState(null);\n  const [longitude, setLongitude] = useState(null);\n  const [city, setCity] = useState('');\n  const [temperature, setTemperature] = useState(null);\n  const [humidity, setHumidity] = useState(null);\n  const [sunrise, setSunrise] = useState(null);\n  const [sunset, setSunset] = useState(null);\n  const [icon, setIcon] = useState('');\n\n  const[forecast,setForecast] = useState([]);\n  const[loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(function(position) {\n      setLatitude(position.coords.latitude);\n      setLongitude(position.coords.longitude);\n      // console.log(\"Latitude is:\", position.coords.latitude);\n      // console.log(\"Longitude is:\", position.coords.longitude);\n    });\n\n    axios.get(`${URL}?lat=${latitude}&lon=${longitude}&exclude=hourly,minutely&appid=${API_KEY}`)\n    .then((weatherData) => {\n      setLoading(false);\n      console.log(weatherData.data);\n      setTemperature(weatherData.data.current.temp);\n      setSunset(weatherData.data.current.sunset);\n      setSunrise(weatherData.data.current.sunrise);\n      setHumidity(weatherData.data.current.humidity);\n      setCity(weatherData.data.timezone);\n      setIcon(weatherData.data.current.weather[0].main);\n      setForecast(weatherData.data.daily);\n    })                            \n  }, [latitude, longitude])\n  return (\n    <div className=\"main\">\n      <Header />\n      {loading ? (\n        <div>\n        <p>Loading..Please wait</p>\n        <Loader active inline='centered' />\n        </div>\n      ) : (\n        <WeatherCard \n        temperature={temperature}\n        humidity={humidity}\n        sunrise={sunrise}\n        sunset={sunset}\n        city={city}\n        icon={icon}\n        />\n\n      )}\n\n      <Forecast forecast={forecast}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}